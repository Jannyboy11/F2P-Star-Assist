package com.janboerman.starhunt.generator

val PluginHubProject = "PluginHub-Project"
val PluginProject = "RuneLite-Plugin"
val CommonProject = "Common";

val BuildDotGradle =
    """plugins {
      |	id 'java'
      |}
      |
      |repositories {
      |	mavenLocal()
      |	maven {
      |		url = 'https://repo.runelite.net'
      |	}
      |	mavenCentral()
      |}
      |
      |def runeLiteVersion = '1.8.11'
      |
      |dependencies {
      |	compileOnly group: 'net.runelite', name:'client', version: runeLiteVersion
      |
      |	compileOnly 'org.projectlombok:lombok:1.18.20'
      |	annotationProcessor 'org.projectlombok:lombok:1.18.20'
      |
      |	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
      | testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
      |	testImplementation group: 'net.runelite', name:'client', version: runeLiteVersion
      |	testImplementation group: 'net.runelite', name:'jshell', version: runeLiteVersion
      |}
      |
      |group = 'com.janboerman.f2p-starhunt'
      |version = '0.1'
      |sourceCompatibility = '1.8'
      |
      |tasks.withType(JavaCompile) {
      |	options.encoding = 'UTF-8'
      |}
      |""".stripMargin

val SettingsDotGradle =
    """rootProject.name = 'F2P-StarHunt'
      |""".stripMargin

def checkDirs(): Option[(os.Path, os.Path, os.Path, os.Path)] = {
    val rootDir = os.pwd
    if (!rootDir.endsWith(os.RelPath("F2P-StarHunt"))) {
        println("Please run this script from root directory (F2P-StarHunt)")
        return None
    }

    val pluginDir = rootDir/PluginProject
    val commonDir = rootDir/CommonProject
    val gradleProjectDir = rootDir/PluginHubProject
    Some((rootDir, pluginDir, commonDir, gradleProjectDir))
}

@main def generate(): Unit = {

    copyTemplate()
    copySources()

}

@main def copyTemplate(): Unit = {

    checkDirs() match {
        case Some((rootDir, pluginDir, commonDir, gradleProjectDir)) =>
            copyTemplate(rootDir, pluginDir, commonDir, gradleProjectDir)
        case None =>
    }

}

private def copyTemplate(rootDir: os.Path, pluginDir: os.Path, commonDir: os.Path, gradleProjectDir: os.Path): Unit = {

    os.proc("git", "clone", "https://github.com/runelite/example-plugin.git", PluginHubProject).call(rootDir)
    os.remove.all(gradleProjectDir/"src"/"test"/"java"/"com")
    os.remove.all(gradleProjectDir/"src"/"main"/"java"/"com")

}

// I probably want to use the maven exec plugin and define the main class in the pom.xml
// https://www.mojohaus.org/exec-maven-plugin/
@main def copySources(): Unit = {

    checkDirs() match {
        case Some((rootDir, pluginDir, commonDir, gradleProjectDir)) =>
            copySources(rootDir, pluginDir, commonDir, gradleProjectDir)
        case None =>
    }

}

private def copySources(rootDir: os.Path, pluginDir: os.Path, commonDir: os.Path, gradleProjectDir: os.Path): Unit = {

    val pluginSrc = pluginDir/"src"
    val commonSrc = commonDir/"src"
    val targetSrc = gradleProjectDir/"src"
    os.copy(from = commonSrc, to = targetSrc, mergeFolders = true, replaceExisting = true)
    os.copy(from = pluginSrc, to = targetSrc, mergeFolders = true, replaceExisting = true)

    val targetReadMe = gradleProjectDir/"README.md"
    os.copy(rootDir/"README.md", targetReadMe, replaceExisting = true)
    os.write.append(targetReadMe,
        """
          |
          |# This is a generated project
          |This project has been generated by the PluginHub-Project-Generator over at [F2P-StarHunt](https://github.com/Jannyboy11/F2P-StarHunt).
          |""".stripMargin)
    val targetLicense = gradleProjectDir/"LICENSE.txt"
    os.copy(rootDir/"LICENSE.txt", targetLicense, replaceExisting = true)

    val targetBuildGradle = gradleProjectDir/"build.gradle"
    os.write.over(targetBuildGradle, BuildDotGradle, truncate = true)
    val targetSettingsGradle = gradleProjectDir/"settings.gradle"
    os.write.over(targetSettingsGradle, SettingsDotGradle, truncate = true)

}

//or, alternatively, push the submodule using 'git push --recurse-submodules=on-demand'
//as described at: https://git-scm.com/book/en/v2/Git-Tools-Submodules
@main def push(): Unit = {

    checkDirs() match {
        case Some((rootDir, pluginDir, commonDir, gradleProjectDir)) =>
            os.proc("git", "add", ".").call(gradleProjectDir)
            os.proc("git", "commit", "-m", "\"Generate F2P-StarHunt project compatible with plugin hub\"").call(gradleProjectDir)
            os.proc("git", "branch", "-M", "master").call(gradleProjectDir)
            os.proc("git", "remote", "add", "f2p-starhunt", "git@github.com:Jannyboy11/F2P-StarHunt-PluginHub.git").call(gradleProjectDir)
            os.proc("git", "push", "--set-upstream", "f2p-starhunt", "master", "--force").call(gradleProjectDir)
        case None =>
    }

}
