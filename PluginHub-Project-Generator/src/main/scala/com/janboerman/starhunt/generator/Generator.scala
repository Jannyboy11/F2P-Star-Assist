package com.janboerman.starhunt.generator

import scala.io.Source

val PluginHubProject = "PluginHub-Project"
val PluginProject = "RuneLite-Plugin"
val CommonProject = "Common";

@main def generate(): Unit = checkDirs() match {
    case Some((rootDir, pluginDir, commonDir, gradleProjectDir)) =>
        copySources(rootDir, pluginDir, commonDir, gradleProjectDir)
        copyTemplate(rootDir, pluginDir, commonDir, gradleProjectDir)
    case None =>
}

@main def copyTemplate(): Unit = checkDirs() match {
    case Some((rootDir, pluginDir, commonDir, gradleProjectDir)) =>
        copyTemplate(rootDir, pluginDir, commonDir, gradleProjectDir)
    case None =>
}

// I probably want to use the maven exec plugin and define the main class in the pom.xml
// https://www.mojohaus.org/exec-maven-plugin/
@main def copySources(): Unit = checkDirs() match {
    case Some((rootDir, pluginDir, commonDir, gradleProjectDir)) =>
        copySources(rootDir, pluginDir, commonDir, gradleProjectDir)
    case None =>
}

//or, alternatively, push the submodule using 'git push --recurse-submodules=on-demand'
//as described at: https://git-scm.com/book/en/v2/Git-Tools-Submodules
@main def push(): Unit = checkDirs() match {
    case Some((rootDir, pluginDir, commonDir, gradleProjectDir)) =>
        os.proc("git", "add", ".").call(gradleProjectDir)
        os.proc("git", "commit", "-m", "\"Generate F2P-StarHunt project compatible with plugin hub\"").call(gradleProjectDir)
        os.proc("git", "branch", "-M", "master").call(gradleProjectDir)
        os.proc("git", "remote", "add", "f2p-starhunt", "git@github.com:Jannyboy11/F2P-StarHunt-PluginHub.git").call(gradleProjectDir)
        os.proc("git", "push", "--set-upstream", "f2p-starhunt", "master", "--force").call(gradleProjectDir)
    case None =>
}

private def copyTemplate(rootDir: os.Path, pluginDir: os.Path, commonDir: os.Path, gradleProjectDir: os.Path): Unit = {
    os.proc("git", "clone", "https://github.com/runelite/example-plugin.git", PluginHubProject).call(rootDir)
    os.remove.all(gradleProjectDir/"src"/"test"/"java"/"com")
    os.remove.all(gradleProjectDir/"src"/"main"/"java"/"com")
}

private def copySources(rootDir: os.Path, pluginDir: os.Path, commonDir: os.Path, gradleProjectDir: os.Path): Unit = {
    //copy source code
    val pluginSrc = pluginDir/"src"
    val commonSrc = commonDir/"src"
    val targetSrc = gradleProjectDir/"src"
    os.copy(from = commonSrc, to = targetSrc, mergeFolders = true, replaceExisting = true)
    os.copy(from = pluginSrc, to = targetSrc, mergeFolders = true, replaceExisting = true)

    //copy readme
    val targetReadMe = gradleProjectDir/"README.md"
    os.copy(rootDir/"README.md", targetReadMe, replaceExisting = true)
    os.write.append(targetReadMe,
        """
          |
          |# This is a generated project!
          |This project has been generated by the PluginHub-Project-Generator over at [F2P-StarHunt](https://github.com/Jannyboy11/F2P-StarHunt). \
          |As such, the build instructions do not apply. Instead, compile using [Gradle](https://gradle.org/): `gradle clean build`.
          |""".stripMargin)

    //copy license
    val targetLicense = gradleProjectDir/"LICENSE.txt"
    os.copy(rootDir/"LICENSE.txt", targetLicense, replaceExisting = true)

    //copy build files
    val rootPomSource = Source.fromFile((rootDir/"pom.xml").toIO)
    val pluginPomSource = Source.fromFile((pluginDir/"pom.xml").toIO)
    val commonPomSource = Source.fromFile((commonDir/"pom.xml").toIO)

    val projectInfo = readProjectInfo(rootPomSource)
    val dependenciesInfo = readDependencyInfo(pluginPomSource, commonPomSource)
    val buildGradle = buildDotGradle(dependenciesInfo.runeliteVersion, dependenciesInfo.lombokVersion, dependenciesInfo.junitVersion, projectInfo.version, projectInfo.group)
    val settingsGradle = settingsDotGradle(projectInfo.name)
    val runelitePluginProperties = pluginSrc/"main"/"resources"/"runelite-plugin.properties"

    val targetBuildGradle = gradleProjectDir/"build.gradle"
    os.write.over(targetBuildGradle, buildGradle, truncate = true)
    val targetSettingsGradle = gradleProjectDir/"settings.gradle"
    os.write.over(targetSettingsGradle, settingsGradle, truncate = true)
    val targetRunelitePluginProperties = gradleProjectDir/"runelite-plugin.properties"
    os.copy(runelitePluginProperties, targetRunelitePluginProperties, replaceExisting = true)

    commonPomSource.close()
    pluginPomSource.close()
    rootPomSource.close()
}

private def checkDirs(): Option[(os.Path, os.Path, os.Path, os.Path)] = {
    val rootDir = os.pwd
    if (!rootDir.endsWith(os.RelPath("F2P-StarHunt"))) {
        println("Please run this script from root directory (F2P-StarHunt)")
        return None
    }

    val pluginDir = rootDir/PluginProject
    val commonDir = rootDir/CommonProject
    val gradleProjectDir = rootDir/PluginHubProject
    Some((rootDir, pluginDir, commonDir, gradleProjectDir))
}

private case class RootProjectInfo(group: String, name: String, version: String)
private case class DependenciesInfo(runeliteVersion: String, lombokVersion: String, junitVersion: String)

private def readProjectInfo(rootPom: Source): RootProjectInfo = {
    val parser = scala.xml.parsing.ConstructingParser.fromSource(rootPom, false)
    val project = parser.document()

    val groupNode = project \ "groupId"
    val nameNode = project \ "artifactId"
    val versionNode = project \ "version"

    RootProjectInfo(groupNode.text, nameNode.text, versionNode.text)
}

private def readDependencyInfo(pluginPom: Source, commonPom: Source): DependenciesInfo = {
    var parser = scala.xml.parsing.ConstructingParser.fromSource(pluginPom, false)
    var project = parser.document()
    val runeliteVersion = project \ "properties" \ "runelite.version"
    val lombokVersion = project \ "properties" \ "lombok.version"

    parser = scala.xml.parsing.ConstructingParser.fromSource(commonPom, false)
    project = parser.document()
    val junitVersion = project \ "properties" \ "junit.version"

    DependenciesInfo(runeliteVersion.text, lombokVersion.text, junitVersion.text)
}

private def settingsDotGradle(projectName: String): String =
   s"""rootProject.name = '${projectName}'
   |""".stripMargin

private def buildDotGradle(runeliteVersion: String, lombokVersion: String, junitVersion: String, f2pStarHuntVersion: String, f2pStarHuntGroup: String): String =
   s"""plugins {
   |	id 'java'
   |}
   |
   |repositories {
   |	mavenLocal()
   |	maven {
   |		url = 'https://repo.runelite.net'
   |	}
   |	mavenCentral()
   |}
   |
   |def runeLiteVersion = '${runeliteVersion}'
   |
   |dependencies {
   |	compileOnly group: 'net.runelite', name:'client', version: runeLiteVersion
   |
   |	compileOnly 'org.projectlombok:lombok:${lombokVersion}'
   |	annotationProcessor 'org.projectlombok:lombok:${lombokVersion}'
   |
   |	testImplementation 'org.junit.jupiter:junit-jupiter-api:${junitVersion}'
   |	testImplementation 'org.junit.jupiter:junit-jupiter-engine:${junitVersion}'
   |	testImplementation group: 'net.runelite', name:'client', version: runeLiteVersion
   |	testImplementation group: 'net.runelite', name:'jshell', version: runeLiteVersion
   |}
   |
   |group = '${f2pStarHuntGroup}'
   |version = '${f2pStarHuntVersion}'
   |sourceCompatibility = '1.8'
   |
   |tasks.withType(JavaCompile) {
   |	options.encoding = 'UTF-8'
   |}
   |""".stripMargin
